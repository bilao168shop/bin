<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>捞那®卡头管理系统</title>
    <style>
        :root {
            --primary-color: #4a6bdf;
            --success-color: #4CAF50;
            --warning-color: #FFC107;
            --danger-color: #F44336;
            --text-color: #333;
            --light-gray: #f5f7fa;
            --medium-gray: #e0e0e0;
            --dark-gray: #757575;
        }
        
        body {
            font-family: 'Segoe UI', 'Microsoft YaHei', sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background-color: var(--light-gray);
            margin: 0;
            padding: 20px;
            max-width: 90%;
            margin: 0 auto;
        }
        
        #connectionStatus {
            position: fixed;
            top: 10px;
            right: 10px;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
            color: white;
            z-index: 1000;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            display: none;
        }
        
        h1 {
            color: var(--primary-color);
            text-align: center;
            margin-bottom: 30px;
            position: relative;
        }
        
        h1:after {
            content: "";
            display: block;
            width: 100px;
            height: 3px;
            background: var(--primary-color);
            margin: 10px auto;
        }
        
        /* 修改后的表单布局 */
        #entryForm {
            background: white;
            padding: 12px 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            display: flex;
            align-items: center;
            gap: 10px;
            justify-content: space-between;
        }
        
        .form-row {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .form-group {
            margin: 0;
            display: flex;
            align-items: center;
        }
        
        label {
            margin-right: 8px;
            margin-bottom: 0;
            font-weight: 600;
            color: var(--dark-gray);
            font-size: 14px;
            white-space: nowrap;
        }
        
        input[type="text"],
        input[type="number"],
        textarea {
            height: 36px;
            padding: 8px 12px;
            border: 1px solid var(--medium-gray);
            border-radius: 4px;
            font-size: 14px;
            box-sizing: border-box;
        }
        
        #binInput {
            width: 120px;
        }
        
        #noteInput {
            width: 300px;
            resize: none;
            height: 36px;
        }
        
        /* 修改后的状态按钮 */
        .status-buttons {
            display: flex;
            gap: 6px;
            margin: 0;
        }
        
        .statusBtn {
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
            height: 36px;
            overflow: hidden;
        }
        
        .statusBtn.active {
            box-shadow: 0 0 0 2px white, 0 0 0 4px var(--primary-color);
        }
        
        .statusBtn[data-status="成功"] {
            background-color: var(--success-color);
            color: white;
        }
        
        .statusBtn[data-status="失败"] {
            background-color: var(--danger-color);
            color: white;
        }
        
        .statusBtn[data-status="异常"] {
            background-color: var(--warning-color);
            color: black;
        }
        
        .primary-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0 15px;
            border-radius: 4px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
            height: 36px;
            margin-left: 5px;
        }
        
        .primary-btn:hover {
            background-color: #3a56c4;
        }
        
        /* 搜索区域样式 */
        .search-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        #searchInput {
            padding: 12px 15px;
            width: 300px;
            max-width: 100%;
            border: 1px solid var(--medium-gray);
            border-radius: 20px;
            font-size: 16px;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="%23757575" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" y1="21" x2="16.65" y2="16.65"/></svg>');
            background-repeat: no-repeat;
            background-position: 15px center;
            padding-left: 40px;
        }
        
        .bin-count-info {
            color: var(--dark-gray);
            font-size: 14px;
            white-space: nowrap;
        }
        
        /* 搜索结果样式 */
        #tempSearchResult {
            display: none;
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            border-left: 4px solid var(--primary-color);
        }
        
        .search-result-item {
            margin-bottom: 8px;
            padding: 8px;
            background: var(--light-gray);
            border-radius: 4px;
        }
        
        .search-result-label {
            font-weight: 600;
            color: var(--primary-color);
            margin-right: 10px;
        }
        
        /* 以下所有原有样式完全保持不变 */
        #dataTable {
            width: 100%;
            border-collapse: collapse;
            background: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
        }
        
        #dataTable th {
            background-color: var(--primary-color);
            color: white;
            padding: 15px;
            text-align: left;
            cursor: pointer;
            user-select: none;
        }
        
        #dataTable th:hover {
            background-color: #3a56c4;
        }
        
        #dataTable th.sort-asc:after {
            content: " ↑";
        }
        
        #dataTable th.sort-desc:after {
            content: " ↓";
        }
        
        #dataTable td {
            padding: 12px 15px;
            border-bottom: 1px solid var(--medium-gray);
        }
        
        #dataTable tr:last-child td {
            border-bottom: none;
        }
        
        #dataTable tr:hover {
            background-color: rgba(74, 107, 223, 0.05);
        }
        
        .bin-link-container {
            display: flex;
            align-items: center;
        }
        
        .bin-link {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 600;
        }
        
        .bin-link:hover {
            text-decoration: underline;
        }
        
        .bin-count {
            background: var(--primary-color);
            color: white;
            font-size: 12px;
            padding: 2px 6px;
            border-radius: 10px;
            margin-left: 8px;
        }
        
        .scheme-icon {
            height: 20px;
            vertical-align: middle;
            margin-right: 5px;
        }
        
        .success-count {
            color: var(--success-color);
            font-weight: bold;
        }
        
        .fail-count {
            color: var(--danger-color);
            font-weight: bold;
        }
        
        .warning-count {
            color: var(--warning-color);
            font-weight: bold;
        }
        
        .success-rate {
            font-weight: bold;
        }
        
        .status-badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .success-badge {
            background-color: rgba(76, 175, 80, 0.2);
            color: var(--success-color);
        }
        
        .fail-badge {
            background-color: rgba(244, 67, 54, 0.2);
            color: var(--danger-color);
        }
        
        .warning-badge {
            background-color: rgba(255, 193, 7, 0.2);
            color: #ff8f00;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.4);
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 25px;
            border-radius: 8px;
            width: 80%;
            max-width: 1200px;
            max-height: 80vh;
            overflow: auto;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: black;
        }
        
        .detail-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        .detail-table th {
            background-color: #f1f3f9;
            padding: 12px;
            text-align: left;
        }
        
        .detail-table td {
            padding: 12px;
            border-bottom: 1px solid var(--medium-gray);
        }
        
        .loading {
            color: var(--dark-gray);
            font-style: italic;
        }
        
        .error-dialog {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.2);
            z-index: 1000;
            max-width: 80%;
            max-height: 80%;
            overflow: auto;
        }
        
        .error-dialog h3 {
            color: #e53e3e;
            margin-top: 0;
        }
        
        .secondary-btn {
            background: #e2e8f0;
            color: #2d3748;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            font-weight: 600;
            cursor: pointer;
        }
        
        .secondary-btn:hover {
            background: #cbd5e0;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(-10px); }
        }
        
        /* 银行信息卡片样式 */
        .bank-info-card {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 15px;
            background: var(--light-gray);
            border-radius: 8px;
        }
        
        .bank-info-left {
            flex: 1;
        }
        
        .bank-info-right {
            flex: 1;
            margin-left: 20px;
        }
        
        .bank-info-item {
            margin-bottom: 10px;
            font-size: 15px;
        }
        
        .bank-info-label {
            font-weight: 600;
            color: var(--primary-color);
            margin-right: 10px;
        }
        
        .bank-info-value {
            font-weight: 500;
        }
        
        .bank-note-textarea {
            width: 100%;
            height: 120px;
            padding: 10px;
            border: 1px solid var(--medium-gray);
            border-radius: 4px;
            resize: none;
            font-family: inherit;
            font-size: 14px;
        }
        
        /* 上传按钮样式 */
        .upload-btn-wrapper {
            position: relative;
            display: inline-block;
        }
        
        .upload-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0 15px;
            border-radius: 4px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
            height: 36px;
            margin-left: 5px;
        }
        
        .upload-btn:hover {
            background-color: #3a56c4;
        }
        
        .upload-btn-wrapper input[type=file] {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        
        /* 响应式设计 */
        @media (max-width: 768px) {
            body {
                padding: 10px;
            }
            
            #entryForm {
                padding: 15px;
                flex-direction: column;
                align-items: flex-start;
            }
            
            .form-row {
                width: 100%;
                justify-content: space-between;
            }
            
            #dataTable {
                display: block;
                overflow-x: auto;
            }
            
            .modal-content {
                width: 95%;
                margin: 10% auto;
            }
            
            .status-buttons {
                flex-wrap: wrap;
            }
            
            .bank-info-card {
                flex-direction: column;
            }
            
            .bank-info-right {
                margin-left: 0;
                margin-top: 15px;
            }
        }
    </style>
</head>
<body>
    <div id="connectionStatus"></div>
    <h1>捞那®卡头管理系统</h1>
    
    <form id="entryForm">
        <div class="form-row">
            <div class="form-group">
                <label for="binInput">卡头 (BIN):</label>
                <input type="text" id="binInput" placeholder="输入卡号或BIN" pattern="\d+" required>
            </div>
            
            <div class="form-group">
                <label>状态:</label>
                <div class="status-buttons">
                    <button type="button" class="statusBtn" data-status="成功">成功</button>
                    <button type="button" class="statusBtn" data-status="失败">失败</button>
                    <button type="button" class="statusBtn" data-status="异常">异常</button>
                </div>
            </div>
            
            <div class="form-group">
                <label for="operatorInput">操作人:</label>
                <input type="text" id="operatorInput" placeholder="输入操作人姓名">
            </div>
            
            <div class="form-group">
                <label for="amountInput">金额 (可选):</label>
                <input type="number" id="amountInput" placeholder="输入金额">
            </div>
            
            <div class="form-group">
                <label for="noteInput">备注 (可选):</label>
                <textarea id="noteInput" placeholder="输入备注信息"></textarea>
            </div>
            
            <button type="submit" class="primary-btn" id="saveBtn">添加记录</button>
            
            <div class="upload-btn-wrapper">
                <button type="button" class="upload-btn">上传记录</button>
                <input type="file" id="fileUpload" accept=".xlsx,.xls">
            </div>
        </div>
        
        <div class="search-container">
            <input type="text" id="searchInput" placeholder="搜索卡头...">
            <span class="bin-count-info" id="binCountInfo">加载中...</span>
        </div>
    </form>

    <div id="tempResult" class="temp-result"></div>
    <div id="tempSearchResult" class="temp-search-result"></div>

    <table id="dataTable">
        <thead>
            <tr>
                <th data-sort="bin">卡头</th>
                <th data-sort="bank_name">银行</th>
                <th data-sort="card_type">卡类型</th>
                <th data-sort="scheme">卡组织</th>
                <th data-sort="brand">品牌</th>
                <th data-sort="risk_desc">地区</th>
                <th data-sort="success">成功</th>
                <th data-sort="fail">失败</th>
                <th data-sort="warning">异常</th>
                <th data-sort="successRate">成功率</th>
                <th>风控备注</th>
            </tr>
        </thead>
        <tbody>
            <!-- 数据将通过JavaScript动态填充 -->
        </tbody>
    </table>

    <div id="detailModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 id="modalTitle">BIN详情</h2>
            <div id="modalContent">
                <!-- 详情内容将通过JavaScript动态填充 -->
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
    // 配置
    const IINAPI_KEY = "MlIDgiUwEvuMWgK6ok4h9msL9O7DsZm0";
    const BACKUP_API_URL = "https://api.freebinchecker.com/bin/";
    
    // 数据
    let records = [];
    let metaCache = {};
    let currentStatus = '';
    let sortConfig = { key: null, direction: 'asc' };
    
    // 卡组织图标
    const schemeIcons = {
        'VISA': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Visa_Inc._logo.svg/2560px-Visa_Inc._logo.svg.png',
        'MASTERCARD': 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Mastercard-logo.svg/1280px-Mastercard-logo.svg.png',
        'AMEX': 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/American_Express_logo.svg/1200px-American_Express_logo.svg.png',
        'AMERICAN EXPRESS': 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/American_Express_logo.svg/1200px-American_Express_logo.svg.png',
        'UNIONPAY': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/UnionPay_logo.svg/1200px-UnionPay_logo.svg.png',
        'JCB': 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/JCB_logo.svg/1200px-JCB_logo.svg.png',
        'DISCOVER': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Discover_Card_logo.svg/1280px-Discover_Card_logo.svg.png'
    };

    // 初始化Supabase客户端
    window.supabase = supabase.createClient(
        'https://irhbelntvsjotztnqwnv.supabase.co',
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlyaGJlbG50dnNqb3R6dG5xd252Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3NjA2NDYsImV4cCI6MjA2MjMzNjY0Nn0.ZNx-7eQp9BcViuA1xdwflsFqX5R3ByfLcbOHPNrloa8',
        {
            db: { schema: 'public' },
            auth: { persistSession: false }
        }
    );

    // 测试数据库连接
    async function testConnection() {
        try {
            const { error } = await window.supabase
                .from('bin_records')
                .select('*')
                .limit(0);
            
            if (error && error.code !== '42P01') throw error;
            return true;
        } catch (error) {
            console.error('连接测试失败:', error);
            throw new Error('无法连接到数据库服务');
        }
    }

    // 检查连接状态并显示UI反馈
    async function checkConnection() {
        const statusEl = document.getElementById('connectionStatus');
        try {
            statusEl.style.display = 'block';
            statusEl.style.backgroundColor = '#4CAF50';
            statusEl.textContent = '正在连接数据库...';
            
            await testConnection();
            
            statusEl.style.backgroundColor = '#4CAF50';
            statusEl.textContent = '数据库连接正常';
            
            setTimeout(() => statusEl.style.display = 'none', 3000);
            return true;
        } catch (error) {
            statusEl.style.backgroundColor = '#F44336';
            statusEl.textContent = '数据库连接失败';
            throw error;
        }
    }

    // 检查并修复表结构（最终稳定版）
    async function checkAndFixTableStructure() {
        try {
            // 方法1：直接查询（最可靠方式）
            const { data, error } = await window.supabase
                .from('bin_records')
                .select('bin')
                .limit(1);

            // 方法2：如果方法1失败，使用RPC验证
            if (error || !data) {
                const { data: valid, error: validError } = await window.supabase
                    .rpc('validate_table_structure');
                
                if (validError || !valid?.table_exists) {
                    console.log('[DB] 自动修复表结构中...');
                    const { error: repairError } = await window.supabase
                        .rpc('repair_table_structure');
                    if (repairError) throw repairError;
                    return true;
                }
                
                if (!valid?.columns_ok || !valid?.pkey_ok) {
                    console.log('[DB] 自动修复表结构中...');
                    const { error: repairError } = await window.supabase
                        .rpc('repair_table_structure');
                    if (repairError) throw repairError;
                }
            }

            return true;
        } catch (error) {
            console.error('[DB] 最终错误:', error);
            throw new Error(`数据库初始化失败: ${error.message}`);
        }
    }

    // 加载记录
    async function loadRecords() {
        try {
            // 1. 加载主记录
            const { data, error } = await window.supabase
                .from('bin_records')
                .select('*');
            
            if (error) throw error;
            
            // 2. 字段兼容处理
            records = (data || []).map(record => ({
                ...record,
                bank_name: record.bank_name || '未知',
                card_type: record.card_type || '未知',
                scheme: record.scheme || '未知',
                brand: record.brand || '未知',
                risk_desc: record.risk_desc || '未知',
                risk_note: record.risk_note || '',
                created_at: record.created_at || new Date().toISOString()
            }));
            
            // 3. 加载元数据
            const { data: metaData } = await window.supabase
                .from('bin_metadata')
                .select('*');
            
            metaCache = metaData?.reduce((acc, item) => {
                acc[item.bin] = item.data;
                return acc;
            }, {}) || {};
            
            return true;
        } catch (error) {
            console.error('加载记录失败:', error);
            throw new Error('加载记录失败: ' + error.message);
        }
    }

    // 显示提示
    function showToast(message, isError = false) {
        const toast = document.createElement('div');
        toast.style = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px;
            background: ${isError ? '#F44336' : '#4CAF50'};
            color: white;
            border-radius: 4px;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            animation: fadeIn 0.3s;
        `;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.animation = 'fadeOut 0.3s';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    // 显示错误对话框
    function showErrorDialog(content) {
        const dialog = document.createElement('div');
        dialog.className = 'error-dialog';
        dialog.innerHTML = content;
        document.body.appendChild(dialog);
    }

    // 初始化状态按钮
    function initStatusButtons() {
        document.querySelectorAll('.statusBtn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.statusBtn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                currentStatus = this.dataset.status;
            });
        });
    }

    // 从任意格式提取BIN
    function extractBin(input) {
        if (!input) return '';
        // 移除所有非数字字符
        const digits = input.replace(/\D/g, '');
        // 取前6位
        return digits.substring(0, 6);
    }

    // 从备注中提取金额
    function extractAmountFromNote(note) {
        if (!note) return null;
        
        // 匹配中文动词+数字+刀/元等
        const amountMatch = note.match(/(出|进|打了|到|支付|付|转|转出|转入)\s*(\d+(?:\.\d+)?)\s*(刀|元|人民币|USD|CNY)/i);
        if (amountMatch && amountMatch[2]) {
            const amount = parseFloat(amountMatch[2]);
            if (confirm(`这张卡${amountMatch[1]}了${amount}${amountMatch[3]}是吗？`)) {
                return amount;
            }
        }
        return null;
    }

    // 处理输入自动填充
    function setupInputAutoFill() {
        const binInput = document.getElementById('binInput');
        const noteInput = document.getElementById('noteInput');
        const amountInput = document.getElementById('amountInput');
        
        // BIN输入变化时自动提取
        binInput.addEventListener('input', function() {
            const bin = extractBin(this.value);
            if (bin && bin.length === 6) {
                this.value = bin;
            }
        });
        
        // 备注输入变化时检查是否有BIN和金额
        noteInput.addEventListener('input', function() {
            // 检查是否有BIN可以提取
            const possibleBin = extractBin(this.value);
            if (possibleBin.length === 6 && !document.getElementById('binInput').value) {
                document.getElementById('binInput').value = possibleBin;
                // 移除备注中的数字部分
                this.value = this.value.replace(/\d/g, '').replace(/\s+/g, ' ').trim();
            }
            
            // 检查是否有金额可以提取
            const amount = extractAmountFromNote(this.value);
            if (amount !== null && !document.getElementById('amountInput').value) {
                document.getElementById('amountInput').value = amount;
            }
        });
    }
                // 更新表格数据
        function updateTable() {
            const tbody = document.querySelector('#dataTable tbody');
            tbody.innerHTML = '';

            // 按当前排序配置排序记录
            const sortedRecords = [...records].sort((a, b) => {
                if (sortConfig.key === 'successRate') {
                    const rateA = (a.success || 0) / ((a.success || 0) + (a.fail || 0) + (a.warning || 0)) || 0;
                    const rateB = (b.success || 0) / ((b.success || 0) + (b.fail || 0) + (b.warning || 0)) || 0;
                    return sortConfig.direction === 'asc' ? rateA - rateB : rateB - rateA;
                }
                
                const valueA = a[sortConfig.key] || '';
                const valueB = b[sortConfig.key] || '';
                return sortConfig.direction === 'asc' 
                    ? String(valueA).localeCompare(String(valueB))
                    : String(valueB).localeCompare(String(valueA));
            });

            // 填充表格行
            sortedRecords.forEach(record => {
                const tr = document.createElement('tr');
                
                // 计算成功率
                const total = (record.success || 0) + (record.fail || 0) + (record.warning || 0);
                const successRate = total > 0 
                    ? Math.round((record.success / total) * 100) + '%' 
                    : '0%';

                // 卡头列
                const binTd = document.createElement('td');
                const binLink = document.createElement('a');
                binLink.href = '#';
                binLink.className = 'bin-link';
                binLink.textContent = record.bin;
                binLink.addEventListener('click', () => showDetailModal(record.bin));
                
                const binCount = document.createElement('span');
                binCount.className = 'bin-count';
                binCount.textContent = total;
                
                binTd.appendChild(binLink);
                binTd.appendChild(binCount);
                tr.appendChild(binTd);

                // 银行列
                const bankTd = document.createElement('td');
                bankTd.textContent = record.bank_name;
                tr.appendChild(bankTd);

                // 卡类型列
                const cardTypeTd = document.createElement('td');
                cardTypeTd.textContent = record.card_type;
                tr.appendChild(cardTypeTd);

                // 卡组织列
                const schemeTd = document.createElement('td');
                if (schemeIcons[record.scheme]) {
                    const icon = document.createElement('img');
                    icon.src = schemeIcons[record.scheme];
                    icon.className = 'scheme-icon';
                    icon.alt = record.scheme;
                    schemeTd.appendChild(icon);
                }
                schemeTd.appendChild(document.createTextNode(record.scheme));
                tr.appendChild(schemeTd);

                // 品牌列
                const brandTd = document.createElement('td');
                brandTd.textContent = record.brand;
                tr.appendChild(brandTd);

                // 地区列
                const riskTd = document.createElement('td');
                riskTd.textContent = record.risk_desc;
                tr.appendChild(riskTd);

                // 成功数列
                const successTd = document.createElement('td');
                successTd.className = 'success-count';
                successTd.textContent = record.success || 0;
                tr.appendChild(successTd);

                // 失败数列
                const failTd = document.createElement('td');
                failTd.className = 'fail-count';
                failTd.textContent = record.fail || 0;
                tr.appendChild(failTd);

                // 异常数列
                const warningTd = document.createElement('td');
                warningTd.className = 'warning-count';
                warningTd.textContent = record.warning || 0;
                tr.appendChild(warningTd);

                // 成功率列
                const rateTd = document.createElement('td');
                rateTd.className = 'success-rate';
                rateTd.textContent = successRate;
                tr.appendChild(rateTd);

                // 风控备注列
                const noteTd = document.createElement('td');
                noteTd.textContent = record.risk_note || '';
                tr.appendChild(noteTd);

                tbody.appendChild(tr);
            });

            // 更新BIN计数
            updateBinCount();
        }

        // 更新BIN计数显示
        function updateBinCount() {
            const uniqueBins = new Set(records.map(r => r.bin)).size;
            document.getElementById('binCountInfo').textContent = `已记录 ${uniqueBins} 个BIN`;
        }

        // 初始化表格排序
        function initTableSorting() {
            document.querySelectorAll('#dataTable th[data-sort]').forEach(th => {
                th.addEventListener('click', () => {
                    const key = th.dataset.sort;
                    if (sortConfig.key === key) {
                        sortConfig.direction = sortConfig.direction === 'asc' ? 'desc' : 'asc';
                    } else {
                        sortConfig.key = key;
                        sortConfig.direction = 'asc';
                    }
                    
                    // 更新排序指示器
                    document.querySelectorAll('#dataTable th').forEach(h => {
                        h.classList.remove('sort-asc', 'sort-desc');
                    });
                    th.classList.add(`sort-${sortConfig.direction}`);
                    
                    updateTable();
                });
            });
        }

        // 初始化搜索功能
        function initSearch() {
            const searchInput = document.getElementById('searchInput');
            const searchResult = document.getElementById('tempSearchResult');
            
            searchInput.addEventListener('input', () => {
                const query = searchInput.value.trim().toLowerCase();
                if (query.length < 3) {
                    searchResult.style.display = 'none';
                    return;
                }
                
                // 搜索BIN、银行、卡类型、卡组织、地区
                const results = records.filter(r => 
                    r.bin.includes(query) ||
                    r.bank_name.toLowerCase().includes(query) ||
                    r.card_type.toLowerCase().includes(query) ||
                    r.scheme.toLowerCase().includes(query) ||
                    r.risk_desc.toLowerCase().includes(query)
                );
                
                if (results.length > 0) {
                    searchResult.innerHTML = results.slice(0, 5).map(r => `
                        <div class="search-result-item">
                            <span class="search-result-label">BIN:</span> ${r.bin}
                            <span class="search-result-label">银行:</span> ${r.bank_name}
                            <span class="search-result-label">卡类型:</span> ${r.card_type}
                            <span class="search-result-label">卡组织:</span> ${r.scheme}
                            <span class="search-result-label">地区:</span> ${r.risk_desc}
                        </div>
                    `).join('');
                    searchResult.style.display = 'block';
                } else {
                    searchResult.innerHTML = '<div class="search-result-item">没有找到匹配的BIN</div>';
                    searchResult.style.display = 'block';
                }
            });
            
            // 点击搜索结果外的区域关闭搜索结果
            document.addEventListener('click', (e) => {
                if (!searchInput.contains(e.target) && !searchResult.contains(e.target)) {
                    searchResult.style.display = 'none';
                }
            });
        }

        // 显示详情模态框
        async function showDetailModal(bin) {
            const modal = document.getElementById('detailModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalContent = document.getElementById('modalContent');
            
            modalTitle.textContent = `BIN详情 - ${bin}`;
            
            // 获取该BIN的所有记录
            const { data: detailRecords, error } = await window.supabase
                .from('bin_records')
                .select('*')
                .eq('bin', bin)
                .order('created_at', { ascending: false });
            
            if (error) {
                modalContent.innerHTML = `<p class="error">加载详情失败: ${error.message}</p>`;
                modal.style.display = 'block';
                return;
            }
            
            // 获取元数据
            const meta = metaCache[bin] || await fetchMetadata(bin, false) || {
                bankName: '未知',
                cardType: '未知',
                scheme: '未知',
                brand: '未知',
                riskDesc: '未知'
            };
            
            // 构建详情内容
            modalContent.innerHTML = `
                <div class="bank-info-card">
                    <div class="bank-info-left">
                        <div class="bank-info-item">
                            <span class="bank-info-label">银行:</span>
                            <span class="bank-info-value">${meta.bankName}</span>
                        </div>
                        <div class="bank-info-item">
                            <span class="bank-info-label">卡组织:</span>
                            <span class="bank-info-value">${meta.scheme}</span>
                        </div>
                        <div class="bank-info-item">
                            <span class="bank-info-label">卡类型:</span>
                            <span class="bank-info-value">${meta.cardType}</span>
                        </div>
                        <div class="bank-info-item">
                            <span class="bank-info-label">地区:</span>
                            <span class="bank-info-value">${meta.riskDesc}</span>
                        </div>
                    </div>
                    <div class="bank-info-right">
                        <h3>风控备注</h3>
                        <textarea class="bank-note-textarea" id="detailRiskNote">${detailRecords[0]?.risk_note || ''}</textarea>
                        <button class="primary-btn" id="saveRiskNote">保存备注</button>
                    </div>
                </div>
                <table class="detail-table">
                    <thead>
                        <tr>
                            <th>时间</th>
                            <th>状态</th>
                            <th>操作人</th>
                            <th>金额</th>
                            <th>备注</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${detailRecords.map(r => `
                            <tr>
                                <td>${new Date(r.created_at).toLocaleString()}</td>
                                <td>
                                    <span class="status-badge ${r.status === '成功' ? 'success-badge' : 
                                        r.status === '失败' ? 'fail-badge' : 'warning-badge'}">
                                        ${r.status}
                                    </span>
                                </td>
                                <td>${r.operator}</td>
                                <td>${r.amount || '-'}</td>
                                <td>${r.note || '-'}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            
            // 初始化保存备注按钮
            document.getElementById('saveRiskNote').addEventListener('click', async () => {
                const note = document.getElementById('detailRiskNote').value;
                try {
                    await window.supabase
                        .from('bin_records')
                        .update({ risk_note: note })
                        .eq('bin', bin);
                    
                    // 更新本地记录
                    records.forEach(r => {
                        if (r.bin === bin) {
                            r.risk_note = note;
                        }
                    });
                    
                    showToast('备注保存成功');
                    updateTable();
                } catch (error) {
                    showToast('保存备注失败', true);
                    console.error('保存备注失败:', error);
                }
            });
            
            modal.style.display = 'block';
            
            // 关闭按钮事件
            document.querySelector('#detailModal .close').addEventListener('click', () => {
                modal.style.display = 'none';
            });
            
            // 点击模态框外部关闭
            window.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }
                // 主初始化函数
        async function initializeApp() {
            try {
                // 显示加载状态
                document.getElementById('binCountInfo').textContent = '初始化中...';
                
                // 1. 检查连接
                await checkConnection();
                
                // 2. 检查并修复表结构
                await checkAndFixTableStructure();
                
                // 3. 加载数据
                await loadRecords();
                
                // 4. 初始化UI组件
                initStatusButtons();
                initForm();
                initSearch();
                initTableSorting();
                initModal();
                initFileUpload();
                initBinInputAutoDetect();
                
                // 5. 更新视图
                updateTable();
                updateBinCount();
                
            } catch (error) {
                console.error('初始化失败:', error);
                document.getElementById('binCountInfo').textContent = '初始化失败';
                
                showErrorDialog(`
                    <h3>系统初始化失败</h3>
                    <p>${error.message}</p>
                    <p>可能原因：</p>
                    <ul>
                        <li>数据库表结构问题</li>
                        <li>网络连接问题</li>
                        <li>权限不足</li>
                    </ul>
                    <button class="primary-btn" onclick="location.reload()">重试</button>
                    <button class="secondary-btn" onclick="resetDatabase()" style="margin-left:10px;">重置数据库</button>
                `);
            }
        }

        // 全局函数导出
        window.showBinDetails = showBinDetails;
        window.deleteRecord = deleteRecord;
        window.updateRiskNote = updateRiskNote;
        window.resetDatabase = resetDatabase;
        window.saveBankNote = saveBankNote;

        // 启动应用
        document.addEventListener('DOMContentLoaded', initializeApp);
    </script>
</body>
</html>
